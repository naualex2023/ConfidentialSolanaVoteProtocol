import * as anchor from "@coral-xyz/anchor";
import { Program } from "@coral-xyz/anchor";
import { PublicKey, SystemProgram } from "@solana/web3.js";
import { CsvpProtocol } from "../target/types/csvp_protocol"; // <-- –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –∏–º—è —Ç–∏–ø–∞ –≤–µ—Ä–Ω–æ–µ
import { randomBytes } from "crypto";
import {
  awaitComputationFinalization,
  getArciumEnv,
  getCompDefAccOffset,
  getArciumAccountBaseSeed,
  getArciumProgAddress,
  uploadCircuit,
  buildFinalizeCompDefTx,
  RescueCipher,
  deserializeLE,
  getMXEAccAddress,
  getMempoolAccAddress,
  getCompDefAccAddress,
  getExecutingPoolAccAddress,
  getComputationAccAddress,
  //getFeePoolAccAddress,
  //getClockAccAddress,
  getClusterAccAddress,
} from "@arcium-hq/client";
import * as fs from "fs/promises";
import * as os from "os";
import { getKeypairFromFile } from "@solana-developers/helpers"
import { describe, it } from "node:test";
import assert from "node:assert";
import { 
  getRandomBigNumber, 
  makeClientSideKeys,
  findElectionPda,
  findSignPda,
  findVoterChunkPda,
  findNullifierPda,
} from "./helpers";

// @ts-ignore
const SECONDS = 1000;

describe("CsvpProtocol", () => {
  // Configure the client to use the local cluster.
  anchor.setProvider(anchor.AnchorProvider.env());
  const program = anchor.workspace.CsvpProtocol as Program<CsvpProtocol>;
  const provider = anchor.getProvider();

  type Event = anchor.IdlEvents<(typeof program)["idl"]>;
  const awaitEvent = async <E extends keyof Event>(eventName: E) => {
    let listenerId: number| null = null;
    const event = await new Promise<Event[E]>((resolve) => {
      listenerId = program.addEventListener(eventName, (event: Event[E]) => {
        resolve(event);
      });
    });
    if (listenerId !== null) await program.removeEventListener(listenerId);

    return event;
  };

  const arciumEnv = getArciumEnv();

  it("–ø—Ä–æ–≤–æ–¥–∏—Ç –ø–æ–ª–Ω–æ–µ –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ–µ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ!", async () => {
    
    // --- 1. –ù–ê–°–¢–†–û–ô–ö–ê ---
    const owner = await getKeypairFromFile(`${os.homedir()}/.config/solana/id.json`);
    const voter = owner; // –ë—É–¥–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å owner –∫–∞–∫ –≥–æ–ª–æ—Å—É—é—â–µ–≥–æ
    
    console.log("–í–ª–∞–¥–µ–ª–µ—Ü (Authority/Voter):", owner.publicKey.toBase58());

    const { privateKey, publicKey, sharedSecret } = await makeClientSideKeys(provider as anchor.AnchorProvider, program.programId);
    
    const cipher = new RescueCipher(sharedSecret);
    
    // --- –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –Ω–∞—à–µ–≥–æ —Ç–µ—Å—Ç–∞ ---
    const ELECTION_ID = new anchor.BN(123); // u64
    const VOTER_CHUNK_INDEX = 0; // u32
    const CHOICE_INDEX = 2; // –ì–æ–ª–æ—Å—É–µ–º –∑–∞ 3-–≥–æ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞ (–∏–Ω–¥–µ–∫—Å 2)
    
    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ñ–µ–π–∫–æ–≤—ã–µ —Ö–µ—à–∏ –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∏ –Ω—É–ª–ª–∏—Ñ–∏–∫–∞—Ç–æ—Ä–∞
    // –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –æ–Ω–∏ –±—ã –≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–ª–∏—Å—å –∫—Ä–∏–ø—Ç–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏
    const voterHash = Array.from(randomBytes(32));
    const nullifierHash = Array.from(randomBytes(32));
    
    // --- –í—ã—á–∏—Å–ª—è–µ–º –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ PDA ---
    const [electionPda, _electionBump] = findElectionPda(program.programId, owner.publicKey, ELECTION_ID);
    const [signPda, _signBump] = findSignPda(program.programId, electionPda);
    const [voterChunkPda, _voterBump] = findVoterChunkPda(program.programId, electionPda, VOTER_CHUNK_INDEX);
    const [nullifierPda, _nullifierBump] = findNullifierPda(program.programId, electionPda, Buffer.from(nullifierHash));

    console.log("Election PDA:", electionPda.toBase58());
    console.log("Signer PDA:", signPda.toBase58());
    console.log("Voter Chunk PDA:", voterChunkPda.toBase58());

    // --- 2. –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø –°–•–ï–ú MPC ---
    // (–≠—Ç–æ—Ç –∫–æ–¥ –≤—ã–≥–ª—è–¥–∏—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –∏ –≤–∑—è—Ç –∏–∑ –≤–∞—à–µ–≥–æ —Ç–µ—Å—Ç–∞)
    console.log("Initializing vote stats computation definition");
    const initVoteStatsSig = await initVoteStatsCompDef(program, owner, false, false);
    console.log("... Vote stats comp def initialized:", initVoteStatsSig);

    console.log("Initializing voting computation definition");
    const initVoteSig = await initVoteCompDef(program, owner, false, false);
    console.log("... Vote comp def initialized:", initVoteSig);

    console.log("Initializing reveal result computation definition");
    const initRRSig = await initRevealResultCompDef(program, owner, false, false);
    console.log("... Reveal result comp def initialized:", initRRSig);
    
    
    // --- 3. –°–û–ó–î–ê–ù–ò–ï –í–´–ë–û–†–û–í (initialize_election) ---
    console.log(`\nüÜï –°–æ–∑–¥–∞–Ω–∏–µ –≤—ã–±–æ—Ä–æ–≤ (ID: ${ELECTION_ID.toString()})...`);
    
    //const initCompOffset = getRandomBigNumber();
    const mxeAccountPda = getMXEAccAddress(program.programId);
    
    // –í—Ä–µ–º—è (start_time, end_time)
    const now = new anchor.BN(Math.floor(Date.now() / 1000));
    const startTime = now.sub(new anchor.BN(60)); // –ù–∞—á–∞–ª–∏—Å—å –º–∏–Ω—É—Ç—É –Ω–∞–∑–∞–¥
    const endTime = now.add(new anchor.BN(3600)); // –ó–∞–∫–∞–Ω—á–∏–≤–∞—é—Ç—Å—è —á–µ—Ä–µ–∑ —á–∞—Å
    
    const electionNonce = randomBytes(16);

    const electionComputationOffset = getRandomBigNumber();

    const initSig = await program.methods
      .initVoteStats(
        electionComputationOffset,
        anchor.BN(ELECTION_ID), 
        '–í—ã–±–æ—Ä—ã –ü—Ä–µ–∑–∏–¥–µ–Ω—Ç–∞ –ì–∞–ª–∞–∫—Ç–∏–∫–∏',
        anchor.BN(startTime),
        anchor.BN(endTime),
        new anchor.BN(deserializeLE(electionNonce).toString())
        //initCompOffset // –≠—Ç–æ—Ç –∞—Ä–≥—É–º–µ–Ω—Ç –Ω—É–∂–µ–Ω –∏–∑-–∑–∞ `#[instruction]` –Ω–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä–µ
      )
      .accountsPartial({
        // –ê–∫–∫–∞—É–Ω—Ç—ã –∏–∑ Rust-—Å—Ç—Ä—É–∫—Ç—É—Ä—ã `InitializeElection`
        authority: owner.publicKey,
        electionAccount: electionPda,
        signPdaAccount: signPda,
        systemProgram: SystemProgram.programId,
        arciumProgram: getArciumProgAddress(),
        // Arcium –∞–∫–∫–∞—É–Ω—Ç—ã
        mxeAccount: getMXEAccAddress(program.programId),
        mempoolAccount: getMempoolAccAddress(program.programId),
        executingPool: getExecutingPoolAccAddress(program.programId),
        computationAccount: getComputationAccAddress(program.programId, electionComputationOffset),
        compDefAccount: getCompDefAccAddress(
          program.programId,
          Buffer.from(getCompDefAccOffset("init_vote_stats")).readUInt32LE()
        ),
        clusterAccount: arciumEnv.arciumClusterPubkey,
        // poolAccount: getArciumFeePoolAccAddress(),
        // clockAccount: getArciumClockAccAddress(),
        // poolAccount: getFeePoolAccAddress(), // üëà --- 2. –†–ê–°–ö–û–ú–ú–ï–ù–¢–ò–†–£–ô–¢–ï –≠–¢–û
        // clockAccount: getClockAccAddress(),
      })
      .rpc({ skipPreflight: true, commitment: "confirmed" });

    console.log("... –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –≤—ã–±–æ—Ä–æ–≤ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞:", initSig);
    
    const finalizeInitSig = await awaitComputationFinalization(
      provider as anchor.AnchorProvider,
      electionComputationOffset,
      program.programId,
      "confirmed"
    );
    console.log("... –í—ã–±–æ—Ä—ã —Ñ–∏–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã (MPC init_vote_stats –≤—ã–ø–æ–ª–Ω–µ–Ω):", finalizeInitSig);
    
    
    // --- 4. –†–ï–ì–ò–°–¢–†–ê–¶–ò–Ø –ò–ó–ë–ò–†–ê–¢–ï–õ–Ø (register_voters) ---
    console.log(`\nüìù –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∏–∑–±–∏—Ä–∞—Ç–µ–ª—è –≤ —á–∞–Ω–∫–µ ${VOTER_CHUNK_INDEX}...`);
    
    const registerSig = await program.methods
      .registerVoters(
        VOTER_CHUNK_INDEX,
        [voterHash] // –ü–µ—Ä–µ–¥–∞–µ–º —Ö–µ—à –Ω–∞—à–µ–≥–æ –∏–∑–±–∏—Ä–∞—Ç–µ–ª—è
      )
      .accountsPartial({
        authority: owner.publicKey,
        election: electionPda,
        voterRegistry: voterChunkPda,
        systemProgram: SystemProgram.programId,
      })
      .rpc({ skipPreflight: true, commitment: "confirmed" });

    console.log("... –ò–∑–±–∏—Ä–∞—Ç–µ–ª—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω:", registerSig);
    

    // --- 5. –ì–û–õ–û–°–û–í–ê–ù–ò–ï (cast_vote) ---
    console.log(`\nüó≥Ô∏è  –ì–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ –∑–∞ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞ —Å –∏–Ω–¥–µ–∫—Å–æ–º ${CHOICE_INDEX}...`);
    
    const voteCompOffset = getRandomBigNumber();
    
    // –®–∏—Ñ—Ä—É–µ–º –Ω–∞—à –≥–æ–ª–æ—Å (–∏–Ω–¥–µ–∫—Å –∫–∞–Ω–¥–∏–¥–∞—Ç–∞)
    const plaintext = [BigInt(CHOICE_INDEX)]; // [u64]
    const voteNonce = randomBytes(16);
    const ciphertext = cipher.encrypt(plaintext, voteNonce); // [u8; 32]
    
    const voteSig = await program.methods
      .castVote(
        voteCompOffset,  
        0, // voter_chunk_index      
        Array.from(ciphertext[0]), // vote_ciphertext
        Array.from(publicKey), // vote_encryption_pubkey
        new anchor.BN(deserializeLE(voteNonce).toString()), // vote_nonce
        nullifierHash, // nullifier_hash
        voterHash, // voter_hash
       // voteCompOffset // computation_offset
      )
      .accountsPartial({
        // –ê–∫–∫–∞—É–Ω—Ç—ã –∏–∑ Rust-—Å—Ç—Ä—É–∫—Ç—É—Ä—ã `CastVote`
        voter: voter.publicKey,
        electionAccount: electionPda,
        voterRegistry: voterChunkPda,
        nullifierAccount: nullifierPda,
        signPdaAccount: signPda,
        systemProgram: SystemProgram.programId,
        arciumProgram: getArciumProgAddress(),
        // Arcium –∞–∫–∫–∞—É–Ω—Ç—ã
        mxeAccount: mxeAccountPda,
        mempoolAccount: getMempoolAccAddress(program.programId),
        executingPool: getExecutingPoolAccAddress(program.programId),
        computationAccount: getComputationAccAddress(program.programId, voteCompOffset),
        compDefAccount: getCompDefAccAddress( // <-- –í–ê–ñ–ù–û: –∏—Å–ø–æ–ª—å–∑—É–µ–º 'vote' offset
          program.programId,
          Buffer.from(getCompDefAccOffset("vote")).readUInt32LE()
        ),
        clusterAccount: arciumEnv.arciumClusterPubkey,
        // poolAccount: getFeePoolAccAddress(),
        // clockAccount: getClockAccAddress(),
      })
      .signers([voter]) // 'voter' –¥–æ–ª–∂–µ–Ω –ø–æ–¥–ø–∏—Å–∞—Ç—å
      .rpc({ skipPreflight: true, commitment: "confirmed" });

    console.log("... –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞:", voteSig);

    const voteEventPromise = awaitEvent("voteEvent"); // <-- –ò—Å–ø—Ä–∞–≤–ª–µ–Ω —Ä–µ–≥–∏—Å—Ç—Ä
    
    const finalizeVoteSig = await awaitComputationFinalization(
      provider as anchor.AnchorProvider,
      voteCompOffset,
      program.programId,
      "confirmed"
    );
    console.log("... –ì–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ —Ñ–∏–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ (MPC vote –≤—ã–ø–æ–ª–Ω–µ–Ω):", finalizeVoteSig);

    const voteEvent = await voteEventPromise;
    console.log(
      `... –°–æ–±—ã—Ç–∏–µ 'VoteEvent' –ø–æ–ª—É—á–µ–Ω–æ! –í—Ä–µ–º–µ–Ω–Ω–∞—è –º–µ—Ç–∫–∞:`,
      voteEvent.timestamp.toString()
    );
    
    // --- 6. –†–ê–°–ö–†–´–¢–ò–ï –†–ï–ó–£–õ–¨–¢–ê–¢–û–í (reveal_result) ---
    console.log(`\nüèÜ –†–∞—Å–∫—Ä—ã—Ç–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤...`);

    // (–í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –º—ã –±—ã –¥–æ–∂–¥–∞–ª–∏—Å—å `endTime`)
    
    const revealCompOffset = getRandomBigNumber();
    
    const revealSig = await program.methods
      .revealResult(
      revealCompOffset, // computation_offset
      ELECTION_ID.toNumber(), // id
      )
      .accountsPartial({
        // –ê–∫–∫–∞—É–Ω—Ç—ã –∏–∑ Rust-—Å—Ç—Ä—É–∫—Ç—É—Ä—ã `RevealResult`
        authority: owner.publicKey,
        electionAccount: electionPda,
        signPdaAccount: signPda,
        systemProgram: SystemProgram.programId,
        arciumProgram: getArciumProgAddress(),
        // Arcium –∞–∫–∫–∞—É–Ω—Ç—ã
        mxeAccount: mxeAccountPda,
        mempoolAccount: getMempoolAccAddress(program.programId),
        executingPool: getExecutingPoolAccAddress(program.programId),
        computationAccount: getComputationAccAddress(program.programId, revealCompOffset),
        compDefAccount: getCompDefAccAddress( // <-- –í–ê–ñ–ù–û: –∏—Å–ø–æ–ª—å–∑—É–µ–º 'reveal_result' offset
          program.programId,
          Buffer.from(getCompDefAccOffset("reveal_result")).readUInt32LE()
        ),
        clusterAccount: arciumEnv.arciumClusterPubkey,
        // poolAccount: getFeePoolAccAddress(),
        // clockAccount: getClockAccAddress(),
      })
      .signers([owner]) // 'authority' –¥–æ–ª–∂–µ–Ω –ø–æ–¥–ø–∏—Å–∞—Ç—å
      .rpc({ skipPreflight: true, commitment: "confirmed" });

    console.log("... –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è —Ä–∞—Å–∫—Ä—ã—Ç–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞:", revealSig);
    
    const finalizeRevealSig = await awaitComputationFinalization(
      provider as anchor.AnchorProvider,
      revealCompOffset,
      program.programId,
      "confirmed"
    );
    console.log("... –†–∞—Å–∫—Ä—ã—Ç–∏–µ —Ñ–∏–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ (MPC reveal_result –≤—ã–ø–æ–ª–Ω–µ–Ω):", finalizeRevealSig);
    
    // --- 7. –ü–†–û–í–ï–†–ö–ê –†–ï–ó–£–õ–¨–¢–ê–¢–û–í ---
    // –í–º–µ—Å—Ç–æ —Å–æ–±—ã—Ç–∏—è, –º—ã –∑–∞–≥—Ä—É–∂–∞–µ–º –∞–∫–∫–∞—É–Ω—Ç –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º –º–∞—Å—Å–∏–≤ `finalResult`
    
    console.log("... –ó–∞–≥—Ä—É–∑–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞ –≤—ã–±–æ—Ä–æ–≤...");
    const pollAccount = await program.account.election.fetch(electionPda);
    
    const results = pollAccount.finalResult.map(n => n.toString());
    console.log("... –§–∏–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã (–º–∞—Å—Å–∏–≤ [u64; 5]):", results);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –Ω–∞—à –≥–æ–ª–æ—Å (–∏–Ω–¥–µ–∫—Å 2) –±—ã–ª —É—á—Ç–µ–Ω
    assert.equal(pollAccount.finalResult[CHOICE_INDEX].toNumber(), 1, "–ì–æ–ª–æ—Å –∑–∞ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞ 2 –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å 1");
    assert.equal(pollAccount.finalResult[0].toNumber(), 0, "–ì–æ–ª–æ—Å –∑–∞ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞ 0 –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å 0");
    
    console.log("\n‚úÖ –¢–µ—Å—Ç —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–π–¥–µ–Ω!");

  });

  // --- –§—É–Ω–∫—Ü–∏–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ CompDef (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ---

  async function initVoteStatsCompDef(
    program: Program<CsvpProtocol>,
    owner: anchor.web3.Keypair,
    uploadRawCircuit: boolean,
    offchainSource: boolean
  ): Promise<string> {
    const baseSeedCompDefAcc = getArciumAccountBaseSeed(
      "ComputationDefinitionAccount"
    );
    const offset = getCompDefAccOffset("init_vote_stats");

    const compDefPDA = PublicKey.findProgramAddressSync(
      [baseSeedCompDefAcc, program.programId.toBuffer(), offset],
      getArciumProgAddress()
    )[0];

    const sig = await program.methods
      .initVoteStatsCompDef()
      .accounts({
        compDefAccount: compDefPDA,
        payer: owner.publicKey,
        mxeAccount: getMXEAccAddress(program.programId),
      })
      .signers([owner])
      .rpc({
        commitment: "confirmed",
        preflightCommitment: "confirmed",
      });

 if (uploadRawCircuit) {
      const rawCircuit = await fs.readFile("build/init_vote_stats.arcis");

      await uploadCircuit(
        provider as anchor.AnchorProvider,
        "init_vote_stats",
        program.programId,
        rawCircuit,
        true
      );
    } else if (!offchainSource) {
      const finalizeTx = await buildFinalizeCompDefTx(
        provider as anchor.AnchorProvider,
        Buffer.from(offset).readUInt32LE(),
        program.programId
      );

      const latestBlockhash = await provider.connection.getLatestBlockhash();
      finalizeTx.recentBlockhash = latestBlockhash.blockhash;
      finalizeTx.lastValidBlockHeight = latestBlockhash.lastValidBlockHeight;
      finalizeTx.sign(owner);
      if (!provider.sendAndConfirm) {
        throw new Error("Provider sendAndConfirm method is undefined");
      }
      await provider.sendAndConfirm(finalizeTx);
    }
    return sig;
  }

  async function initVoteCompDef(
    program: Program<CsvpProtocol>,
    owner: anchor.web3.Keypair,
    uploadRawCircuit: boolean,
    offchainSource: boolean
  ): Promise<string> {
    const baseSeedCompDefAcc = getArciumAccountBaseSeed(
      "ComputationDefinitionAccount"
    );
    const offset = getCompDefAccOffset("vote");

    const compDefPDA = PublicKey.findProgramAddressSync(
      [baseSeedCompDefAcc, program.programId.toBuffer(), offset],
      getArciumProgAddress()
    )[0];

    const sig = await program.methods
      .initVoteCompDef()
      .accounts({
        compDefAccount: compDefPDA,
        payer: owner.publicKey,
        mxeAccount: getMXEAccAddress(program.programId),
      })
      .signers([owner])
      .rpc({
        commitment: "confirmed",
        preflightCommitment: "confirmed",
      });

    if (uploadRawCircuit) {
      const rawCircuit = await fs.readFile("build/vote.arcis");

      await uploadCircuit(
        provider as anchor.AnchorProvider,
        "vote",
        program.programId,
        rawCircuit,
        true
      );
    } else if (!offchainSource) {
      const finalizeTx = await buildFinalizeCompDefTx(
        provider as anchor.AnchorProvider,
        Buffer.from(offset).readUInt32LE(),
        program.programId
      );

      const latestBlockhash = await provider.connection.getLatestBlockhash();
      finalizeTx.recentBlockhash = latestBlockhash.blockhash;
      finalizeTx.lastValidBlockHeight = latestBlockhash.lastValidBlockHeight;

      finalizeTx.sign(owner);

      if (!provider.sendAndConfirm) {
        throw new Error("Provider sendAndConfirm method is undefined");
      }
      await provider.sendAndConfirm(finalizeTx);
    }
    return sig;
  }

  async function initRevealResultCompDef(
    program: Program<CsvpProtocol>,
    owner: anchor.web3.Keypair,
    uploadRawCircuit: boolean,
    offchainSource: boolean
  ): Promise<string> {
    const baseSeedCompDefAcc = getArciumAccountBaseSeed(
      "ComputationDefinitionAccount"
    );
    const offset = getCompDefAccOffset("reveal_result");

    const compDefPDA = PublicKey.findProgramAddressSync(
      [baseSeedCompDefAcc, program.programId.toBuffer(), offset],
      getArciumProgAddress()
    )[0];
    
    const sig = await program.methods
      .initRevealResultCompDef()
      .accounts({
        compDefAccount: compDefPDA,
        payer: owner.publicKey,
        mxeAccount: getMXEAccAddress(program.programId),
      })
      .signers([owner])
      .rpc({
        commitment: "confirmed",
        preflightCommitment: "confirmed",
      });

    if (uploadRawCircuit) {
      const rawCircuit = await fs.readFile("build/reveal_result.arcis");

      await uploadCircuit(
        provider as anchor.AnchorProvider,
        "reveal_result",
        program.programId,
        rawCircuit,
        true
      );
    } else if (!offchainSource) {
      const finalizeTx = await buildFinalizeCompDefTx(
        provider as anchor.AnchorProvider,
        Buffer.from(offset).readUInt32LE(),
        program.programId
      );

      const latestBlockhash = await provider.connection.getLatestBlockhash();
      finalizeTx.recentBlockhash = latestBlockhash.blockhash;
      finalizeTx.lastValidBlockHeight = latestBlockhash.lastValidBlockHeight;

      finalizeTx.sign(owner);

      if (!provider.sendAndConfirm) {
        throw new Error("Provider sendAndConfirm method is undefined");
      }
      await provider.sendAndConfirm(finalizeTx);
    }
    return sig;
  }
});