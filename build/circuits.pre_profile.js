var pre_profile = { 'code':
{"source_file":"//use super::MAX_CANDIDATES; \nuse arcis_imports::*;\n//use borsh::{BorshDeserialize, BorshSerialize};\n\n// Импортируем константу из on-chain кода (нужно настроить пути в Cargo.toml)\n\n\n#[encrypted]\nmod circuits {\n    const MAX_CANDIDATES: usize = 5; \n    use arcis_imports::*;\n    //use arcis_imports::Public; \n    //use borsh::{BorshDeserialize, BorshSerialize};    \n\n    /// Отслеживает зашифрованный счет голосов для MAX_CANDIDATES.\n    //#[derive(BorshSerialize, BorshDeserialize)]\n    pub struct VoteStats {\n        candidate_counts: [u64; MAX_CANDIDATES], \n    }\n\n    /// Представляет сложный голос: индекс выбранного кандидата.\n    //#[derive(BorshSerialize, BorshDeserialize)]\n    pub struct UserVote {\n        candidate_index: u64, // Индекс кандидата (0, 1, ..., N-1)\n    }\n\n    /// Инициализирует зашифрованный счет нулями.\n    #[instruction]\n    pub fn init_vote_stats(mxe: Mxe) -> Enc<Mxe, VoteStats> {\n        let vote_stats = VoteStats { \n            candidate_counts: [0; MAX_CANDIDATES] \n        };\n        mxe.from_arcis(vote_stats)\n    }\n\n    /// Обрабатывает зашифрованный голос и обновляет текущее состояние.\n    #[instruction]\n    pub fn vote(\n        vote_ctxt: Enc<Shared, UserVote>,\n        vote_stats_ctxt: Enc<Mxe, VoteStats>,\n    ) -> Enc<Mxe, VoteStats> {\n        let user_vote = vote_ctxt.to_arcis();\n        let mut vote_stats = vote_stats_ctxt.to_arcis();\n        \n        let index = user_vote.candidate_index as usize;\n\n        // Конфиденциально инкрементируем счетчик по индексу.\n        // Проверка index < MAX_CANDIDATES внутри MPC гарантирует, что \n        // некорректный голос не сломает счетчик, но и не будет учтен.\n        if index < MAX_CANDIDATES {\n            vote_stats.candidate_counts[index] += 1;\n        }\n\n        vote_stats_ctxt.owner.from_arcis(vote_stats)\n    }\n\n    /// Раскрывает финальный результат: дешифрует все N счетчиков.\n    #[instruction]\n    pub fn reveal_result(\n        vote_stats_ctxt: Enc<Mxe, VoteStats>,\n    ) -> [Public<u64>; MAX_CANDIDATES] {\n        let vote_stats = vote_stats_ctxt.to_arcis();\n        \n        let mut public_results: [Public<u64>; MAX_CANDIDATES] = [Public::default(); MAX_CANDIDATES];\n        \n        for i in 0..MAX_CANDIDATES {\n            public_results[i] = vote_stats.candidate_counts[i].to_public();\n        }\n        \n        public_results\n    }\n}","code":[{"code":"0","region":{"Known":[{"line":30,"column":31},{"line":30,"column":32}]}},{"code":"[0; MAX_CANDIDATES]","region":{"Known":[{"line":30,"column":30},{"line":30,"column":49}]}},{"code":"let vote_stats = VoteStats { candidate_counts : [0; MAX_CANDIDATES] };","region":{"Known":[{"line":29,"column":8},{"line":31,"column":10}]}},{"code":"vote_stats","region":{"Known":[{"line":32,"column":23},{"line":32,"column":33}]}},{"code":"self.nonce += 1;","region":"Unknown"},{"code":"self","region":"Unknown"},{"code":"a","region":"Unknown"},{"code":"a","region":"Unknown"},{"code":"self.from_arcis_inner(a)","region":"Unknown"},{"code":"a","region":"Unknown"},{"code":"let phantom = [a; 0];","region":"Unknown"},{"code":"data","region":"Unknown"},{"code":"phantom","region":"Unknown"},{"code":"let data = EncData { data, phantom };","region":"Unknown"},{"code":"owner","region":"Unknown"},{"code":"data","region":"Unknown"},{"code":"Self { owner, data }","region":"Unknown"},{"code":"Enc :: new_inner(self, a, self.from_arcis_inner(a))","region":"Unknown"},{"code":"mxe.from_arcis(vote_stats)","region":{"Known":[{"line":32,"column":8},{"line":32,"column":34}]}},{"code":"self.owner","region":"Unknown"},{"code":"self.data","region":"Unknown"},{"code":"Self :: __arcis_inner(self.owner, self.data)","region":"Unknown"},{"code":"let user_vote = vote_ctxt.to_arcis();","region":{"Known":[{"line":41,"column":8},{"line":41,"column":45}]}},{"code":"let mut vote_stats = vote_stats_ctxt.to_arcis();","region":{"Known":[{"line":42,"column":8},{"line":42,"column":56}]}},{"code":"let index = user_vote.candidate_index as usize;","region":{"Known":[{"line":44,"column":8},{"line":44,"column":55}]}},{"code":"index < MAX_CANDIDATES","region":{"Known":[{"line":49,"column":11},{"line":49,"column":33}]}},{"code":"index","region":{"Known":[{"line":50,"column":40},{"line":50,"column":45}]}},{"code":"vote_stats.candidate_counts [index] += 1;","region":{"Known":[{"line":50,"column":12},{"line":50,"column":52}]}},{"code":"if index < MAX_CANDIDATES { vote_stats.candidate_counts [index] += 1; }","region":{"Known":[{"line":49,"column":8},{"line":51,"column":9}]}},{"code":"vote_stats","region":{"Known":[{"line":53,"column":41},{"line":53,"column":51}]}},{"code":"vote_stats_ctxt.owner.from_arcis(vote_stats)","region":{"Known":[{"line":53,"column":8},{"line":53,"column":52}]}},{"code":"let vote_stats = vote_stats_ctxt.to_arcis();","region":{"Known":[{"line":61,"column":8},{"line":61,"column":52}]}},{"code":"Public :: default()","region":{"Known":[{"line":63,"column":65},{"line":63,"column":82}]}},{"code":"let mut public_results : [Public < u64 > ; MAX_CANDIDATES] =\n[Public :: default(); MAX_CANDIDATES];","region":{"Known":[{"line":63,"column":8},{"line":63,"column":100}]}}]}
, 'instructions':
{"vote":{"profilees":[{"code_idx":19,"before_size_id":0,"after_size_id":0},{"code_idx":20,"before_size_id":0,"after_size_id":1},{"code_idx":21,"before_size_id":0,"after_size_id":2},{"code_idx":22,"before_size_id":0,"after_size_id":2},{"code_idx":19,"before_size_id":2,"after_size_id":2},{"code_idx":20,"before_size_id":2,"after_size_id":2},{"code_idx":21,"before_size_id":2,"after_size_id":3},{"code_idx":23,"before_size_id":2,"after_size_id":3},{"code_idx":24,"before_size_id":3,"after_size_id":3},{"code_idx":25,"before_size_id":3,"after_size_id":4},{"code_idx":26,"before_size_id":4,"after_size_id":4},{"code_idx":27,"before_size_id":4,"after_size_id":5},{"code_idx":28,"before_size_id":3,"after_size_id":6},{"code_idx":29,"before_size_id":6,"after_size_id":6},{"code_idx":4,"before_size_id":6,"after_size_id":7},{"code_idx":5,"before_size_id":7,"after_size_id":7},{"code_idx":6,"before_size_id":7,"after_size_id":7},{"code_idx":7,"before_size_id":7,"after_size_id":7},{"code_idx":8,"before_size_id":7,"after_size_id":8},{"code_idx":9,"before_size_id":8,"after_size_id":8},{"code_idx":10,"before_size_id":8,"after_size_id":8},{"code_idx":11,"before_size_id":8,"after_size_id":8},{"code_idx":12,"before_size_id":8,"after_size_id":8},{"code_idx":13,"before_size_id":8,"after_size_id":8},{"code_idx":14,"before_size_id":8,"after_size_id":8},{"code_idx":15,"before_size_id":8,"after_size_id":8},{"code_idx":16,"before_size_id":8,"after_size_id":8},{"code_idx":17,"before_size_id":7,"after_size_id":8},{"code_idx":30,"before_size_id":6,"after_size_id":8}]},"init_vote_stats":{"profilees":[{"code_idx":0,"before_size_id":0,"after_size_id":0},{"code_idx":1,"before_size_id":0,"after_size_id":0},{"code_idx":2,"before_size_id":0,"after_size_id":0},{"code_idx":3,"before_size_id":0,"after_size_id":0},{"code_idx":4,"before_size_id":0,"after_size_id":1},{"code_idx":5,"before_size_id":1,"after_size_id":1},{"code_idx":6,"before_size_id":1,"after_size_id":1},{"code_idx":7,"before_size_id":1,"after_size_id":1},{"code_idx":8,"before_size_id":1,"after_size_id":2},{"code_idx":9,"before_size_id":2,"after_size_id":2},{"code_idx":10,"before_size_id":2,"after_size_id":2},{"code_idx":11,"before_size_id":2,"after_size_id":2},{"code_idx":12,"before_size_id":2,"after_size_id":2},{"code_idx":13,"before_size_id":2,"after_size_id":2},{"code_idx":14,"before_size_id":2,"after_size_id":2},{"code_idx":15,"before_size_id":2,"after_size_id":2},{"code_idx":16,"before_size_id":2,"after_size_id":2},{"code_idx":17,"before_size_id":1,"after_size_id":2},{"code_idx":18,"before_size_id":0,"after_size_id":2}]}}
, 'instruction_locations':
{"vote":{"Known":[{"line":36,"column":4},{"line":36,"column":18}]},"init_vote_stats":{"Known":[{"line":27,"column":4},{"line":27,"column":18}]}}
};
